#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>

using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m =-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);
#define F first
#define S second

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F < b.F)||(a.F==b.F&&a.S<b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}

int tree[26][100005];
int n;
int query(int* tree,int i)
{
    int sum = 0;
    while(i>0) {sum+=tree[i];i-=(i&-i);}
    return sum;
}

void update(int* tree, int i, int x)
{
    while(i<=n){tree[i]+=x;i+=(i&-i);}
}

int range_query(int* tree,int i, int j)
{
    int pre=query(tree,i-1);
    int suf=query(tree,j);
    return suf-pre;
}
int main()
{
    fio;
    //read;
    string s;
    cin>>s;
    n=s.size();
    int q;
    cin>>q;
    for(int i=0;i<n;i++) update(tree[s[i]-'a'],i+1,1);

    while(q--)
    {
        int x;
        cin>>x;
        if(x==1)
        {
            int i;
            char c;
            cin>>i>>c;
            update(tree[s[i-1]-'a'],i,-1);
            s[i-1]=c;
            update(tree[s[i-1]-'a'],i,1);
        }
        else
        {
            int l,r;
            cin>>l>>r;
            int sum=0;
            for(int i=0;i<26;i++) if(range_query(tree[i],l,r)>0) sum++;
            cout<<sum<<"\n";
        }
    }
    return 0;
}
