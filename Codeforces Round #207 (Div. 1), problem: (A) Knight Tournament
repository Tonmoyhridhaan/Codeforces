#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m =-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);
#define F first
#define S second

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F < b.F)||(a.F==b.F&&a.S<b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}

int arr[300005];
int tree[1200005];

void update(int node, int b, int e, int i, int j, int x)
{
    if(b>j || e<i) return;
    else if(b>=i && e<=j && tree[node]!=0) return;
    else if(b>=i && e<=j && b==e && (b>x||e<x)){
        if(tree[node]==0) tree[node]=x;
        return;
    }
    else if(b==x&&e==x) {tree[node]=0;return;}
    int left = node<<1;
    int right = (node<<1) + 1;
    int m = (b+e)>>1;
    update(left,b,m,i,j,x);
    update(right,m+1,e,i,j,x);
    tree[node] = min(tree[left],tree[right]);
}
void print(int node,int b,int e)
{
    if(b==e){printf("%d ",tree[node]);return;}
    int left = node<<1;
    int right = (node<<1) + 1;
    int m = (b+e)>>1;
    print(left,b,m);
    print(right,m+1,e);
}
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    while(m--)
    {
        int l,r,x;
        scanf("%d%d%d",&l,&r,&x);
        update(1,1,n,l,r,x);
    }
    print(1,1,n);
    return 0;
}
