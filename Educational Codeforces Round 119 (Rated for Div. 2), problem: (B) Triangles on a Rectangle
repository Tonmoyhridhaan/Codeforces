/* ðŸ¤˜ I am Back ðŸ¤˜ */

#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;

/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
*/
#define     pb                  push_back
#define     pii                 pair<int,int>
#define     pli                 pair<long long int,int>
#define     pbi                 pair<bool,int>
#define     pob                 pop_back
#define     all(a)              a.begin(),a.end()
#define     fio                 ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define     i64                 long long int
#define     mem(x,y)            memset(x,y,sizeof(x))
#define     fill(arr,b)         fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define     maxarr(n,arr,m)     m=-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define     read                freopen("input.txt","r",stdin);
#define     sortd(x,y)          sort(x,y,greater<int>());
#define     F                   first
#define     S                   second
#define     pdi                 pair<double,int>
#define     INF                 999999999999999

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F > b.F)||(a.F==b.F&&a.S>b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}
//bool isprime(int n){for(int i=2;i*i<=n;i++){if(n%i==0)return false;}return true;}

double triangle(double x1,double y1,int x2,double y2,double x3,double y3){
    return (0.5)*abs(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));
}
int main(){
    fio;
    //read;
    int t;
    cin >> t;
    while(t--){
        int w,h;
        cin >> w >> h;

        int k1;
        cin >> k1;
        int x1[k1+1];
        for(int i=0;i<k1;i++){
            cin >> x1[i];
        }
        int dx1 = x1[k1-1]-x1[0];

        int k2;
        cin >> k2;
        int x2[k2+1];
        for(int i=0;i<k2;i++){
            cin >> x2[i];
        }
        int dx2 = x2[k2-1]-x2[0];

        int k3;
        cin >> k3;
        int y1[k3+1];
        for(int i=0;i<k3;i++){
            cin >> y1[i];
        }
        int dy1 = y1[k3-1]-y1[0];

        int k4;
        cin >> k4;
        int y2[k4+1];
        for(int i=0;i<k4;i++){
            cin >> y2[i];
        }
        int dy2 = y2[k4-1]-y2[0];

        double ans=0;

        for(int i=0;i<k2;i++){
            double area = triangle(x1[0],0,x1[k1-1],0,x2[i],h);
            ans = max(area,ans);
        }

        for(int i=0;i<k1;i++){
            double area = triangle(x2[0],h,x2[k2-1],h,x1[i],0);
            ans = max(area,ans);
        }

        for(int i=0;i<k4;i++){
            double area = triangle(0,y1[0],0,y1[k3-1],w,y2[i]);
            ans = max(area,ans);
        }

        for(int i=0;i<k3;i++){
            double area = triangle(w,y2[0],w,y2[k4-1],0,y1[i]);
            ans = max(area,ans);
        }
        cout << (long long)(ans*2) << endl;
    }
    return 0;
}
