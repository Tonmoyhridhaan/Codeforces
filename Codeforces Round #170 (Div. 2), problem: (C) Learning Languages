#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m=-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);
#define F first
#define S second

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F > b.F)||(a.F==b.F&&a.S>b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}

int p[105],is[105],rnk[105];

void f(int i){
    if(i==102) return;
    p[i]=i;
    f(++i);
}

int findx(int x){
    if(p[x]==x) return x;
    return p[x]=findx(p[x]);
}

void union_set(int x, int y)
{
    p[findx(y)] = findx(x);
}
int main(){
    fio;
    f(0);
    int n,m,k,u,v,no=0;
    bool fg=false;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        cin>>k;
        if(k==0) {no++;continue;}
        fg=true;
        cin>>u;
        is[u]++;
        for(int i=1;i<k;i++){
            cin>>v;
            is[v]++;
            union_set(u,v);
        }
    }
    if(!fg) {cout<<n;return 0;}
    int ans=0;
    for(int i=1;i<=m;i++)
        if(p[i]==i&&is[i]!=0) ans++;
    cout<<(ans-1)+no;
return 0;
}
