#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m=-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);
#define F first
#define S second

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F < b.F)||(a.F==b.F&&a.S<b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}

#define N 500000
int pr[N+1],k=1;
int lp[N+1];
void sieve()
{

    for (int i=2; i<=N; ++i)
    {
        if (lp[i] == 0){lp[i] = i;pr[k++] = i;}
        for (int j=1; j<k && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
            lp[i * pr[j]] = pr[j];
    }

}
i64 SOD(int n)
{
    i64 sum=1;
    for(int i=1;pr[i]*pr[i]<=n&&i<k;i++)
    {
        int cnt=1;
        while(n%pr[i]==0){cnt++;n/=pr[i];}
        sum*=(pow(1LL*pr[i],cnt)-1)/(1LL*(pr[i]-1));
    }
    if(n>1) sum*=(pow(1LL*n,2)-1)/(1LL*(n-1));
    return sum;

}
int main()
{
    //read;
    int t;
    sieve();
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        i64 ans=SOD(n);
        printf("%d\n",ans-n);
    }
    return 0;
}
