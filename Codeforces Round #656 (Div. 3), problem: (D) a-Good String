#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;

/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
*/
#define     pb                  push_back
#define     pii                 pair<int,int>
#define     pli                 pair<long long int,int>
#define     pbi                 pair<bool,int>
#define     pob                 pop_back
#define     all(a)              a.begin(),a.end()
#define     fio                 ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define     i64                 long long int
#define     mem(x,y)            memset(x,y,sizeof(x))
#define     fill(arr,b)         fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define     maxarr(n,arr,m)     m=-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define     read                freopen("input.txt","r",stdin);
#define     sortd(x,y)          sort(x,y,greater<int>());
#define     F                   first
#define     S                   second
#define     pdi                 pair<double,int>
const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F > b.F)||(a.F==b.F&&a.S>b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}
//bool isprime(int n){for(int i=2;i*i<=n;i++){if(n%i==0)return false;}return true;}

string s;
int f(int l,int r,char c){
    if(l==r) return s[l]!=c;
    int cnt1=0,cnt2=0;
    int m=((l+r)>>1);
    for(int i=l;i<=m;i++){
        if(s[i]!=c) cnt1++;
    }
    cnt1+=f(m+1,r,c+1);
    for(int i=m+1;i<=r;i++){
        if(s[i]!=c) cnt2++;
    }
    cnt2+=f(l,m,c+1);
    return min(cnt1,cnt2);
}
int main(){
    //read;
    fio;
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        cin>>s;
        int x=f(0,n-1,'a');
        cout<<x<<endl;
        //s.clear();
    }
    return 0;
}
